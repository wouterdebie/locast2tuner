on:
  push:
    branches:
      - main

name: Continuous Integration

jobs:
  # quickcheck:
  #   runs-on: ubuntu-latest
  #   outputs:
  #     version: ${{ steps.rustversion.outputs.rustversion }}
  #   steps:
  #     - uses: actions/checkout@v2
  #     - run: cargo check
  #     - run: cargo pkgid
  #     - run: 'echo "$(cargo pkgid | cut -d# -f2)"'
  #     - id: rustversion
  #       run: 'echo "::set-output name=rustversion::$(cargo pkgid | cut -d# -f2)"'
  # build:
  #   needs: quickcheck
  #   name: "build-${{matrix.os}}"
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       # os: [ubuntu-latest, windows-latest, macos-latest]
  #       os: [ubuntu-latest]
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Build
  #       run: cargo build
  #     - name: Run tests
  #       run: cargo test
  debbuild:
    # needs: [build]
    runs-on: ubuntu-latest
    name: Amd64Deb
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: BuildDeb
        id: debbuild
        uses: wouterdebie/cargo-deb-amd64-ubuntu@1.2
      - name: Upload Deb Artifact
        uses: actions/upload-artifact@v2
        with:
          name: amd64deb
          path: ./target/x86_64-unknown-linux-musl/debian/*

  ppa:
    needs: [debbuild]
    runs-on: ubuntu-latest
    steps:
      - run: sudo apt -y install gnupg
      - uses: actions/download-artifact@v2
        with:
          name: amd64deb
      - uses: actions/checkout@master
        with:
          repository: wouterdebie/wouterdebie.github.io
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
          fetch-depth: 0 # otherwise, you will failed to push refs to dest repo
          path: wouterdebie.github.io
          token: ${{ secrets.API_KEY }}
      - name: Create local changes
        env:
          PRIV_KEY: ${{ secrets.PRIV_KEY }}
          EMAIL: wouter@evenflow.nl
        run: |
          find .
          echo "$PRIV_KEY" > /tmp/privkey
          gpg --import -a /tmp/privkey
          cp *.deb ./wouterdebie.github.io/ppa
          pushd ./wouterdebie.github.io/ppa
          dpkg-scanpackages --multiversion . > Packages
          gzip -k -f Packages
          apt-ftparchive release . > Release
          gpg --default-key "${EMAIL}" -abs -o - Release > Release.gpg
          gpg --default-key "${EMAIL}" --clearsign -o - Release > InRelease
          popd
      - name: Commit & Push changes
        uses: actions-js/push@master
        with:
          github_token: ${{ secrets.API_KEY }}
          directory: wouterdebie.github.io
          repository: wouterdebie/wouterdebie.github.io
  # fedorarpmbuild:
  #   needs: [build]
  #   runs-on: ubuntu-latest
  #   name: FedoraRpm
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: BuildRpm
  #     id: buildrpm
  #     uses: ebbflow-io/cargo-rpm-amd64-fedora@1.1
  #   - name: Upload RPM Artifact
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: fedorarpm
  #       path: ./target/x86_64-unknown-linux-musl/release/rpmbuild/RPMS/x86_64/*
  # opensuseleaprpmbuild:
  #   needs: [build]
  #   runs-on: ubuntu-latest
  #   name: OpensuseLeapRpm
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: BuildRpm
  #     id: buildrpm
  #     uses: ebbflow-io/cargo-rpm-amd64-opensuseleap@1.0
  #   - name: Upload RPM Artifact
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: opensuserpm
  #       path: ./target/x86_64-unknown-linux-musl/release/rpmbuild/RPMS/x86_64/*
  # raspbianbuild:
  #   needs: [build]
  #   runs-on: ubuntu-latest
  #   name: Armv7Deb
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: BuildDeb
  #     id: debbuild
  #     uses: ebbflow-io/cargo-deb-armv7-debian@1.0
  #   - name: Upload Deb Artifact
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: armv7deb
  #       path: ./target/armv7-unknown-linux-musleabihf/debian/*
  # windowsbuild:
  #   needs: [build]
  #   runs-on: windows-latest
  #   env:
  #     RUSTFLAGS: '-C target-feature=+crt-static'
  #   name: Windows
  #   steps:
  #   - uses: actions/checkout@v2
  #   - uses: actions-rs/toolchain@v1
  #     with:
  #       toolchain: stable
  #   - uses: actions-rs/install@v0.1
  #     with:
  #       crate: cargo-wix
  #       version: latest
  #   - run: cargo wix -v --nocapture -o .
  #   - name: Upload MSI Artifact
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: windows
  #       path: ./*.msi
  # macosbuild:
  #   needs: [build, quickcheck]
  #   runs-on: macos-latest
  #   name: MacOS
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Build
  #     run: cargo build --release
  #   - name: Zip up macos binaries
  #     run: 'zip -j ebbflow_${{needs.quickcheck.outputs.version}}_macos.zip ./target/release/ebbflowd ./target/release/ebbflow'
  #   - name: Upload Zipped Artifact
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: macos
  #       path: 'ebbflow_${{needs.quickcheck.outputs.version}}_macos.zip'
  #   - name: Upload Bin Artifact
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: macos
  #       path: ./target/release/ebbflow
  #   - name: Upload Daemon Artifact
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: macos
  #       path: ./target/release/ebbflowd
  # amd64binaries:
  #   needs: [build, quickcheck]
  #   runs-on: ubuntu-latest
  #   name: Amd64StaticBinaries
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: StaticBinaryBuild
  #     id: amd64staticbuild
  #     uses: ebbflow-io/cargo-deb-amd64-ubuntu@1.0
  #     with:
  #       cmd: cargo build --release --target=x86_64-unknown-linux-musl
  #   - name: Upload Daemon Artifact
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: amd64binaries
  #       path: ./target/x86_64-unknown-linux-musl/release/ebbflowd
  #   - name: Upload Ebbflow Artifact
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: amd64binaries
  #       path: ./target/x86_64-unknown-linux-musl/release/ebbflow
  #   - run: 'zip -j amd64binaries.zip ./target/x86_64-unknown-linux-musl/release/ebbflow ./target/x86_64-unknown-linux-musl/release/ebbflowd'
  #   - name: Upload Zip Artifact
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: amd64binaries
  #       path: amd64binaries.zip
  # arm7binaries:
  #   needs: [build, quickcheck]
  #   runs-on: ubuntu-latest
  #   name: Armv7StaticBinaries
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: StaticBinaryBuild
  #     id: armv7statibuild
  #     uses: ebbflow-io/cargo-deb-armv7-debian@1.0
  #     with:
  #       cmd: cargo build --release --target=armv7-unknown-linux-musleabihf
  #   - name: Upload Daemon Artifact
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: armv7binaries
  #       path: ./target/armv7-unknown-linux-musleabihf/release/ebbflowd
  #   - name: Upload Ebbflow Artifact
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: armv7binaries
  #       path: ./target/armv7-unknown-linux-musleabihf/release/ebbflow
  #   - run: 'zip -j armv7binaries.zip ./target/armv7-unknown-linux-musleabihf/release/ebbflow ./target/armv7-unknown-linux-musleabihf/release/ebbflowd'
  #   - name: Upload Zip Artifact
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: armv7binaries
  #       path: armv7binaries.zip
  # linuxamd64dockerbuild:
  #   needs: [amd64binaries]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/download-artifact@v2
  #     - run: cp ./amd64binaries/ebbflow ./docker/
  #     - run: chmod +x ./docker/ebbflow
  #     - name: Build and push Docker images
  #       uses: docker/build-push-action@v1
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}
  #         repository: ebbflow/ebbflow-client-linux-amd64
  #         tags: latest
  #         path: ./docker/
  # update_release_draft:
  #   needs: [quickcheck, arm7binaries, linuxamd64dockerbuild, amd64binaries, macosbuild, windowsbuild, raspbianbuild, debbuild, opensuseleaprpmbuild, fedorarpmbuild]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Create Release
  #       id: create_release
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
  #       with:
  #         tag_name: '${{ needs.quickcheck.outputs.version }}'
  #         release_name: Release ${{ needs.quickcheck.outputs.version }}
  #         body: 'Change Me'
  #         draft: true
  #         prerelease: false
  #     - uses: actions/download-artifact@v2
  #     - run: ls -lha
  #     - name: Upload amd64 deb Release Asset
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create_release.outputs.upload_url }}
  #         asset_path: ./amd64deb/ebbflow_${{needs.quickcheck.outputs.version}}_amd64.deb
  #         asset_name: 'ebbflow_${{needs.quickcheck.outputs.version}}_amd64.deb'
  #         asset_content_type: application/vnd.debian.binary-package
  #     - name: Upload armv7 deb Release Asset
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create_release.outputs.upload_url }}
  #         asset_path: ./armv7deb/ebbflow_${{needs.quickcheck.outputs.version}}_armhf.deb
  #         asset_name: 'ebbflow_${{needs.quickcheck.outputs.version}}_armhf.deb'
  #         asset_content_type: application/vnd.debian.binary-package
  #     - name: Upload amd64 rpm fedora Release Asset
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create_release.outputs.upload_url }}
  #         asset_path: ./fedorarpm/ebbflow-${{needs.quickcheck.outputs.version}}-1.x86_64.rpm
  #         asset_name: 'ebbflow_${{needs.quickcheck.outputs.version}}-1_amd64_fedora.rpm'
  #         asset_content_type: application/octet-stream
  #     - name: Upload amd64 rpm opensuse Release Asset
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create_release.outputs.upload_url }}
  #         asset_path: ./opensuserpm/ebbflow-${{needs.quickcheck.outputs.version}}-1.x86_64.rpm
  #         asset_name: 'ebbflow_${{needs.quickcheck.outputs.version}}-1_amd64_opensuseleap.rpm'
  #         asset_content_type: application/octet-stream
  #     - name: Upload Windows Release Asset
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create_release.outputs.upload_url }}
  #         asset_path: ./windows/ebbflow-${{needs.quickcheck.outputs.version}}-x86_64.msi
  #         asset_name: 'ebbflow_${{needs.quickcheck.outputs.version}}.msi'
  #         asset_content_type: application/octet-stream
  #     - name: Upload Macos Release Asset
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create_release.outputs.upload_url }}
  #         asset_path: ./macos/ebbflow_${{needs.quickcheck.outputs.version}}_macos.zip
  #         asset_name: 'ebbflow_${{needs.quickcheck.outputs.version}}_macos.zip'
  #         asset_content_type: application/zip
  #     - name: Upload Armv7 Static Binary Zip Release Asset
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create_release.outputs.upload_url }}
  #         asset_path: ./armv7binaries/armv7binaries.zip
  #         asset_name: 'ebbflow_${{needs.quickcheck.outputs.version}}_linux_armv7_binaries.zip'
  #         asset_content_type: application/zip
  #     - name: Upload Amd64 Static Binary Zip Release Asset
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create_release.outputs.upload_url }}
  #         asset_path: ./amd64binaries/amd64binaries.zip
  #         asset_name: 'ebbflow_${{needs.quickcheck.outputs.version}}_linux_amd64_binaries.zip'
  #         asset_content_type: application/zip
